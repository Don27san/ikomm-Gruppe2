syntax = "proto3";
package typing_indicator;



//General Structures
message User {
    string userId = 1; 
    string serverId = 2;
}

message DiscoverServer {
  // Empty by design. Need this for correct parsing. Do not delete!
}

//Connection Management Structures
message ServerAnnounce {
    string serverId = 1;
    message Feature {
        string featureName = 1;
        uint32 port = 2;
        uint32 udpPort = 23;
    }
    repeated Feature feature = 2;
}

message ConnectClient { 
    User user = 1;
    int32 udpPort = 22;
}

message ConnectResponse {
    enum Result {
        UNKNOWN_ERROR = 0;
        CONNECTED = 1;
        IS_ALREADY_CONNECTED_ERROR = 2;
    }
    Result result = 1;
}

message HangUp {
    enum Reason {
        UNKNOWN_REASON = 0;
        EXIT = 1;
        TIMEOUT = 2;
        PAYLOAD_LIMIT_EXCEEDED = 3; // ex. 2mb payload
        MESSAGE_MALFORMED = 4; // ex. parse fail
    }
    Reason reason = 1;
 }

message Ping {
}

message Pong {
}

message UnsupportedMessage {
    string message_name = 1;
}





// ALL FEATURE Structures
// Chat Message
// Chat Message
message Group {
    string groupId = 1;
    string serverId = 2;
}

// Document Structure
message Document {
    string documentId = 1;
    string filename = 2;
    string mimeType = 3;
    bytes data = 4;
}

// Translation Structure
message Translation {
    enum Language{
        DE = 0;
        EN = 1;
        ZH = 2;
    }
    string original_message = 1;
    Language target_language = 2;
}

message ChatMessage {
    uint64 messageSnowflake = 1;

    User author = 2;

    message UserOfGroup {
        User user = 1; 
        Group group = 2;
    }
    oneof recipient {
        User user = 3;
        Group group = 4;
        UserOfGroup userOfGroup = 5;
    };
    reserved 6 to 10;

    oneof content {
        string textContent = 11;
        Document document = 12;
        LiveLocation live_location = 22;
        Translation translation = 23;
    }
}




// Typing Indicator Structure
message TypingEvent {
    User user = 1;
    double timestamp = 2;
}

// Bundle for multiple typing events
message TypingEvents {
    repeated TypingEvent typing_events = 1;
}


//Live Location Structure
message LiveLocation {
    User user = 1;
    double timestamp = 2;
    double expiry_at = 3;
    message Location {
        double latitude = 1;
        double longitude = 2;
    };
    Location location = 4;
}

// Bundle for multiple Live Locations
message LiveLocations {
    message ExtendedLiveLocation {
        LiveLocation live_location = 1;
        uint64 messageSnowflake = 2;
    }

    repeated ExtendedLiveLocation extended_live_locations = 1;
}

