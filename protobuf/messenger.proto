syntax = "proto3";
package typing_indicator;
import "google/protobuf/timestamp.proto";



//General Structures
message User {
    string userId = 1; 
    string serverId = 2;
}

message Group {
    string groupId = 1;
    string serverId = 2;
}

message DiscoverServer {
  // Empty by design. Need this for correct parsing. Do not delete!
}

//Connection Management Structures
message ServerAnnounce {
    string serverId = 1;
    message Feature {
        string featureName = 1;
        uint32 port = 2;
    }
    repeated Feature feature = 2;
}


message ConnectClient { 
    User user = 1;
    int32 typingPort = 3; 
    int32 location_port = 2; //We'll must likely send a port info for location feature as well.
}

message ConnectionResponse {
    enum Result {
        UNKNOWN_ERROR = 0;
        CONNECTED = 1;
        IS_ALREADY_CONNECTED_ERROR = 2;
    }
    Result result = 1;
    int32 udpPort = 2;
}

message HangUp {
    enum Reason {
        UNKNOWN_REASON = 0;
        EXIT = 1;
        TIMEOUT = 2;
        PAYLOAD_LIMIT_EXCEEDED = 3; // ex. 2mb payload
        MESSAGE_MALFORMED = 4; // ex. parse fail
    }
    Reason reason = 1;
 }

message Ping {
}

message Pong {
}

message UnsupportedMessage {
    string message_name = 1;
}





// ALL FEATURE Structures
// Chat Message
message ChatMessage {
    uint64 messageSnowflake = 1;

    User author = 2;

    message UserOfGroup {
        User user = 1; 
        Group group = 2;
    }
    oneof recipient {
        User user = 3;
        Group group = 4;
        UserOfGroup userOfGroup = 5;
    };
    reserved 6 to 10;

    oneof content {
        string textContent = 11;
        LiveLocation live_location = 12;
        // stickers, documents, etc...
    }
}

message ChatMessageResponse {
    uint64 messageSnowflake = 1;
    enum Status {
        UNKNOWN_STATUS = 0;
        DELIVERED = 1;
        OTHER_ERROR = 2;
        USER_AWAY = 3;
        USER_NOT_FOUND = 4;
        OTHER_SERVER_TIMEOUT = 5;
        OTHER_SERVER_NOT_FOUND = 6;
        USER_BLOCKED = 7;
    }
    message DeliveryStatus {
        User user = 1;
        Status status = 2;
    }
    repeated DeliveryStatus statuses = 2;
}


// Typing Indicator Structure
message TypingEvent {
    User user = 1;
    double timestamp = 2;
}

// Bundle for multiple typing events
message TypingEvents {
    repeated TypingEvent typing_events = 1;
}

//Live Location Structure
message LiveLocation {
    User user = 1;
    double timestamp = 2;
    double expiry_at = 3;
    message Location {
        double latitude = 1;
        double longitude = 2;
    };
    Location location = 4;
}

// Bundle for multiple LiveLocations
message LiveLocations {
    message ExtendedLiveLocation {
        LiveLocation live_location = 1;
        string chatmessageID = 2;
    }

    repeated ExtendedLiveLocation extended_live_locations = 1;
}

